#!/usr/bin/python3

import os
import datetime
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from pyvirtualdisplay import Display
from selenium.common.exceptions import TimeoutException

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Paths and URLs
driver_path = '/usr/local/bin/geckodriver'
login_url = 'https://dashboard.rss.com/auth/sign-in/'
new_episode_url = 'https://dashboard.rss.com/podcasts/cybersecurity-news/new-episode/'
drafts_url = 'https://dashboard.rss.com/podcasts/cybersecurity-news/'
audio_file_path = os.path.expanduser('~/cybersecurity-news/podcast_audio.mp3')

# User credentials
username = os.getenv('RSS_USERNAME')
password = os.getenv('RSS_PASSWORD')

# Episode details
today = datetime.datetime.today()
episode_title = f"Cybersecurity News for {today.strftime('%d %b %Y')}"

# Check driver path
if not os.path.isfile(driver_path):
    raise ValueError(f"Invalid geckodriver path: {driver_path}")

os.environ['webdriver.firefox.driver'] = driver_path

# Firefox options
options = Options()
options.headless = True

# Start virtual display
display = Display(visible=0, size=(1024, 768))
display.start()

if not display.is_alive():
    raise Exception("Error: Xvfb failed to start.")
else:
    logging.info("Xvfb started successfully.")

driver = None
try:
    service = Service(driver_path)
    driver = webdriver.Firefox(service=service, options=options)
    logging.info('WebDriver initialized')

    driver.get(login_url)
    logging.info('Navigated to login page')

    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'email'))).send_keys(username)
    logging.info('Username entered')

    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'password'))).send_keys(password)
    logging.info('Password entered')

    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'password'))).send_keys(Keys.RETURN)
    logging.info('Login form submitted')

    WebDriverWait(driver, 10).until(EC.url_contains(new_episode_url))
    driver.get(new_episode_url)
    logging.info('Navigated to new episode page')

    episode_title_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'title')))
    episode_description_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'description')))
    episode_audio_input = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'audio')))

    episode_title_input.send_keys(episode_title)
    episode_description_input.send_keys("Today's episode covers the latest cybersecurity news.")

    driver.execute_script("arguments[0].style.display = 'block';", episode_audio_input) 
    episode_audio_input.send_keys(audio_file_path)

    logging.info('Episode details filled')

    # Save as draft
    save_draft_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, '//button/span[contains(text(), "Save Draft")]/..'))
    )
    save_draft_button.click()
    logging.info('Draft saved')

    # Wait for the draft to be saved and navigate to drafts page
    WebDriverWait(driver, 10).until(EC.url_contains(drafts_url))
    driver.get(drafts_url)
    logging.info('Navigated to drafts page')

    # Locate the draft episode and publish it
    draft_episode = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, f'//h5[contains(text(), "{episode_title}")]/ancestor::li'))
    )
    publish_button = WebDriverWait(draft_episode, 10).until(
        EC.element_to_be_clickable((By.XPATH, './/button/span[contains(text(), "Publish")]/..'))
    )
    publish_button.click()
    logging.info('Publish button clicked')

    # Wait for the draft to be published
    WebDriverWait(driver, 10).until(
        EC.text_to_be_present_in_element((By.XPATH, f'//h5[contains(text(), "{episode_title}")]/ancestor::li//span'), 'Published')
    )
    logging.info('Draft published successfully')
    logging.info(f'Published draft URL: {driver.current_url}')

except TimeoutException:
    logging.error("TimeoutException: Element not found")
except Exception as e:
    logging.error(f"Exception: {e}")
finally:
    if driver:
        logging.info('Closing WebDriver session and stopping virtual display')
        driver.quit()
        display.stop()
